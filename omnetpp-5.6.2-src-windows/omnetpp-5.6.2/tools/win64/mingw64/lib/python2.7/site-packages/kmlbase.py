# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kmlbase', [dirname(__file__)])
        except ImportError:
            import _kmlbase
            return _kmlbase
        if fp is not None:
            try:
                _mod = imp.load_module('_kmlbase', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kmlbase = swig_import_helper()
    del swig_import_helper
else:
    import _kmlbase
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class imaxdiv_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaxdiv_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaxdiv_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quot"] = _kmlbase.imaxdiv_t_quot_set
    __swig_getmethods__["quot"] = _kmlbase.imaxdiv_t_quot_get
    if _newclass:
        quot = _swig_property(_kmlbase.imaxdiv_t_quot_get, _kmlbase.imaxdiv_t_quot_set)
    __swig_setmethods__["rem"] = _kmlbase.imaxdiv_t_rem_set
    __swig_getmethods__["rem"] = _kmlbase.imaxdiv_t_rem_get
    if _newclass:
        rem = _swig_property(_kmlbase.imaxdiv_t_rem_get, _kmlbase.imaxdiv_t_rem_set)

    def __init__(self):
        this = _kmlbase.new_imaxdiv_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kmlbase.delete_imaxdiv_t
    __del__ = lambda self: None
imaxdiv_t_swigregister = _kmlbase.imaxdiv_t_swigregister
imaxdiv_t_swigregister(imaxdiv_t)


def imaxabs(n):
    return _kmlbase.imaxabs(n)
imaxabs = _kmlbase.imaxabs

def imaxdiv(numer, denom):
    return _kmlbase.imaxdiv(numer, denom)
imaxdiv = _kmlbase.imaxdiv

def wcstoimax(nptr, endptr, base):
    return _kmlbase.wcstoimax(nptr, endptr, base)
wcstoimax = _kmlbase.wcstoimax

def wcstoumax(nptr, endptr, base):
    return _kmlbase.wcstoumax(nptr, endptr, base)
wcstoumax = _kmlbase.wcstoumax

def strtoimax(nptr, endptr, base):
    return _kmlbase.strtoimax(nptr, endptr, base)
strtoimax = _kmlbase.strtoimax

def strtoumax(nptr, endptr, base):
    return _kmlbase.strtoumax(nptr, endptr, base)
strtoumax = _kmlbase.strtoumax
class Attributes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Attributes, name)
    __repr__ = _swig_repr

    def FindValue(self, key):
        return _kmlbase.Attributes_FindValue(self, key)

    def FindKey(self, value):
        return _kmlbase.Attributes_FindKey(self, value)

    def GetSize(self):
        return _kmlbase.Attributes_GetSize(self)

    def SetString(self, attr_name, attr_val):
        return _kmlbase.Attributes_SetString(self, attr_name, attr_val)

    def __init__(self):
        this = _kmlbase.new_Attributes()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kmlbase.delete_Attributes
    __del__ = lambda self: None
Attributes_swigregister = _kmlbase.Attributes_swigregister
Attributes_swigregister(Attributes)

class Color32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kmlbase.new_Color32(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_red(self):
        return _kmlbase.Color32_get_red(self)

    def set_red(self, value):
        return _kmlbase.Color32_set_red(self, value)

    def get_green(self):
        return _kmlbase.Color32_get_green(self)

    def set_green(self, value):
        return _kmlbase.Color32_set_green(self, value)

    def get_blue(self):
        return _kmlbase.Color32_get_blue(self)

    def set_blue(self, value):
        return _kmlbase.Color32_set_blue(self, value)

    def get_alpha(self):
        return _kmlbase.Color32_get_alpha(self)

    def set_alpha(self, value):
        return _kmlbase.Color32_set_alpha(self, value)

    def get_color_abgr(self):
        return _kmlbase.Color32_get_color_abgr(self)

    def get_color_argb(self):
        return _kmlbase.Color32_get_color_argb(self)

    def to_string_abgr(self):
        return _kmlbase.Color32_to_string_abgr(self)

    def to_string_argb(self):
        return _kmlbase.Color32_to_string_argb(self)

    def set_color_abgr(self, *args):
        return _kmlbase.Color32_set_color_abgr(self, *args)

    def set_color_argb(self, color_argb):
        return _kmlbase.Color32_set_color_argb(self, color_argb)

    def Color32_op_equal(self, color):
        return _kmlbase.Color32_Color32_op_equal(self, color)
    __swig_destroy__ = _kmlbase.delete_Color32
    __del__ = lambda self: None
Color32_swigregister = _kmlbase.Color32_swigregister
Color32_swigregister(Color32)

class DateTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTime, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _kmlbase.DateTime_Create
    if _newclass:
        Create = staticmethod(_kmlbase.DateTime_Create)
    __swig_getmethods__["ToTimeT"] = lambda x: _kmlbase.DateTime_ToTimeT
    if _newclass:
        ToTimeT = staticmethod(_kmlbase.DateTime_ToTimeT)

    def GetTimeT(self):
        return _kmlbase.DateTime_GetTimeT(self)

    def GetXsdTime(self):
        return _kmlbase.DateTime_GetXsdTime(self)

    def GetXsdDate(self):
        return _kmlbase.DateTime_GetXsdDate(self)

    def GetXsdDateTime(self):
        return _kmlbase.DateTime_GetXsdDateTime(self)
    __swig_destroy__ = _kmlbase.delete_DateTime
    __del__ = lambda self: None
DateTime_swigregister = _kmlbase.DateTime_swigregister
DateTime_swigregister(DateTime)

def DateTime_Create(str):
    return _kmlbase.DateTime_Create(str)
DateTime_Create = _kmlbase.DateTime_Create

def DateTime_ToTimeT(str):
    return _kmlbase.DateTime_ToTimeT(str)
DateTime_ToTimeT = _kmlbase.DateTime_ToTimeT

class Vec3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kmlbase.new_Vec3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_longitude(self):
        return _kmlbase.Vec3_get_longitude(self)

    def get_latitude(self):
        return _kmlbase.Vec3_get_latitude(self)

    def has_altitude(self):
        return _kmlbase.Vec3_has_altitude(self)

    def get_altitude(self):
        return _kmlbase.Vec3_get_altitude(self)
    __swig_destroy__ = _kmlbase.delete_Vec3
    __del__ = lambda self: None
Vec3_swigregister = _kmlbase.Vec3_swigregister
Vec3_swigregister(Vec3)

class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["GetString"] = lambda x: _kmlbase.Version_GetString
    if _newclass:
        GetString = staticmethod(_kmlbase.Version_GetString)
    __swig_destroy__ = _kmlbase.delete_Version
    __del__ = lambda self: None
Version_swigregister = _kmlbase.Version_swigregister
Version_swigregister(Version)

def Version_GetString():
    return _kmlbase.Version_GetString()
Version_GetString = _kmlbase.Version_GetString

class XmlFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlFile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_url(self):
        return _kmlbase.XmlFile_get_url(self)
    __swig_destroy__ = _kmlbase.delete_XmlFile
    __del__ = lambda self: None
XmlFile_swigregister = _kmlbase.XmlFile_swigregister
XmlFile_swigregister(XmlFile)

# This file is compatible with both classic and new-style classes.


