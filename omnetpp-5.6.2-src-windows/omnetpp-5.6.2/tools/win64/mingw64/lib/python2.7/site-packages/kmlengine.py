# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kmlengine', [dirname(__file__)])
        except ImportError:
            import _kmlengine
            return _kmlengine
        if fp is not None:
            try:
                _mod = imp.load_module('_kmlengine', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kmlengine = swig_import_helper()
    del swig_import_helper
else:
    import _kmlengine
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import kmldom
import kmlbase
class Bbox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bbox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kmlengine.new_Bbox(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def Contains(self, latitude, longitude):
        return _kmlengine.Bbox_Contains(self, latitude, longitude)

    def ExpandFromBbox(self, bbox):
        return _kmlengine.Bbox_ExpandFromBbox(self, bbox)

    def ExpandLatitude(self, latitude):
        return _kmlengine.Bbox_ExpandLatitude(self, latitude)

    def ExpandLongitude(self, longitude):
        return _kmlengine.Bbox_ExpandLongitude(self, longitude)

    def ExpandLatLon(self, latitude, longitude):
        return _kmlengine.Bbox_ExpandLatLon(self, latitude, longitude)

    def get_north(self):
        return _kmlengine.Bbox_get_north(self)

    def get_south(self):
        return _kmlengine.Bbox_get_south(self)

    def get_east(self):
        return _kmlengine.Bbox_get_east(self)

    def get_west(self):
        return _kmlengine.Bbox_get_west(self)
    __swig_destroy__ = _kmlengine.delete_Bbox
    __del__ = lambda self: None
Bbox_swigregister = _kmlengine.Bbox_swigregister
Bbox_swigregister(Bbox)


def Clone(element):
    return _kmlengine.Clone(element)
Clone = _kmlengine.Clone

def GetFeatureBounds(feature, bbox):
    return _kmlengine.GetFeatureBounds(feature, bbox)
GetFeatureBounds = _kmlengine.GetFeatureBounds

def GetFeatureLatLon(feature):
    return _kmlengine.GetFeatureLatLon(feature)
GetFeatureLatLon = _kmlengine.GetFeatureLatLon

def GetRootFeature(root):
    return _kmlengine.GetRootFeature(root)
GetRootFeature = _kmlengine.GetRootFeature
class KmlFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KmlFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KmlFile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["CreateFromParse"] = lambda x: _kmlengine.KmlFile_CreateFromParse
    if _newclass:
        CreateFromParse = staticmethod(_kmlengine.KmlFile_CreateFromParse)
    __swig_getmethods__["CreateFromImport"] = lambda x: _kmlengine.KmlFile_CreateFromImport
    if _newclass:
        CreateFromImport = staticmethod(_kmlengine.KmlFile_CreateFromImport)

    def get_root(self):
        return _kmlengine.KmlFile_get_root(self)

    def SerializeToString(self):
        return _kmlengine.KmlFile_SerializeToString(self)

    def GetObjectById(self, id):
        return _kmlengine.KmlFile_GetObjectById(self, id)

    def GetSharedStyleById(self, id):
        return _kmlengine.KmlFile_GetSharedStyleById(self, id)
    __swig_destroy__ = _kmlengine.delete_KmlFile
    __del__ = lambda self: None
KmlFile_swigregister = _kmlengine.KmlFile_swigregister
KmlFile_swigregister(KmlFile)

def KmlFile_CreateFromParse(kml_data):
    return _kmlengine.KmlFile_CreateFromParse(kml_data)
KmlFile_CreateFromParse = _kmlengine.KmlFile_CreateFromParse

def KmlFile_CreateFromImport(root):
    return _kmlengine.KmlFile_CreateFromImport(root)
KmlFile_CreateFromImport = _kmlengine.KmlFile_CreateFromImport

class KmzFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KmzFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KmzFile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["OpenFromFile"] = lambda x: _kmlengine.KmzFile_OpenFromFile
    if _newclass:
        OpenFromFile = staticmethod(_kmlengine.KmzFile_OpenFromFile)
    __swig_getmethods__["CreateFromString"] = lambda x: _kmlengine.KmzFile_CreateFromString
    if _newclass:
        CreateFromString = staticmethod(_kmlengine.KmzFile_CreateFromString)

    def ReadKml(self):
        return _kmlengine.KmzFile_ReadKml(self)

    def ReadFile(self, subfile):
        return _kmlengine.KmzFile_ReadFile(self, subfile)
    __swig_destroy__ = _kmlengine.delete_KmzFile
    __del__ = lambda self: None
KmzFile_swigregister = _kmlengine.KmzFile_swigregister
KmzFile_swigregister(KmzFile)

def KmzFile_OpenFromFile(kmz_filepath):
    return _kmlengine.KmzFile_OpenFromFile(kmz_filepath)
KmzFile_OpenFromFile = _kmlengine.KmzFile_OpenFromFile

def KmzFile_CreateFromString(kmz_data):
    return _kmlengine.KmzFile_CreateFromString(kmz_data)
KmzFile_CreateFromString = _kmlengine.KmzFile_CreateFromString


def KmzSplit(kml_url):
    return _kmlengine.KmzSplit(kml_url)
KmzSplit = _kmlengine.KmzSplit

def SplitUri(uri):
    return _kmlengine.SplitUri(uri)
SplitUri = _kmlengine.SplitUri
# This file is compatible with both classic and new-style classes.


